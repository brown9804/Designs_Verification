Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `counter_b4.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `counter_b4.v' to AST representation.
Generating RTLIL representation for module `\counter_b4'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \counter_b4

3.1.2. Analyzing design hierarchy..
Top module:  \counter_b4
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$counter_b4.v:34$1 in module counter_b4.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter_b4.$proc$counter_b4.v:121$10'.
     1/1: $1\b4_Q[3:0]
Creating decoders for process `\counter_b4.$proc$counter_b4.v:34$1'.
     1/4: $0\mem[3:0]
     2/4: $0\b4_Q[3:0]
     3/4: $0\b4_rco[0:0]
     4/4: $0\b4_load[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\counter_b4.\b4_Q' from process `\counter_b4.$proc$counter_b4.v:121$10'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter_b4.\b4_load' using process `\counter_b4.$proc$counter_b4.v:34$1'.
  created $dff cell `$procdff$59' with positive edge clock.
Creating register for signal `\counter_b4.\b4_rco' using process `\counter_b4.$proc$counter_b4.v:34$1'.
  created $dff cell `$procdff$60' with positive edge clock.
Creating register for signal `\counter_b4.\b4_Q' using process `\counter_b4.$proc$counter_b4.v:34$1'.
  created $dff cell `$procdff$61' with positive edge clock.
Creating register for signal `\counter_b4.\mem' using process `\counter_b4.$proc$counter_b4.v:34$1'.
  created $dff cell `$procdff$62' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `counter_b4.$proc$counter_b4.v:121$10'.
Found and cleaned up 6 empty switches in `\counter_b4.$proc$counter_b4.v:34$1'.
Removing empty process `counter_b4.$proc$counter_b4.v:34$1'.
Cleaned up 6 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$eq$counter_b4.v:35$2' (1) in module `\counter_b4' with constant driver `$eq$counter_b4.v:35$2_Y = \b4_reset'.
Replacing $eq cell `$eq$counter_b4.v:43$3' in module `counter_b4' with inverter.
Replacing $eq cell `$eq$counter_b4.v:78$7' in module `counter_b4' with $logic_not.
Replacing $eq cell `$procmux$15_CMP0' in module `counter_b4' with $logic_not.
Replacing $eq cell `$procmux$41_CMP0' in module `counter_b4' with $logic_not.
Replacing $eq cell `$procmux$52_CMP0' in module `counter_b4' with $logic_not.
Optimizing away select inverter for $mux cell `$procmux$17' in module `counter_b4'.
Optimizing away select inverter for $mux cell `$procmux$23' in module `counter_b4'.
Optimizing away select inverter for $mux cell `$procmux$43' in module `counter_b4'.
Optimizing away select inverter for $mux cell `$procmux$54' in module `counter_b4'.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..
  removing unused `$not' cell `$eq$counter_b4.v:43$3'.

3.5. Executing CHECK pass (checking for obvious problems).
checking module counter_b4..
Warning: multiple conflicting drivers for counter_b4.\mem [3]:
    port Q[3] of cell $procdff$61 ($dff)
    port Q[3] of cell $procdff$62 ($dff)
Warning: multiple conflicting drivers for counter_b4.\mem [2]:
    port Q[2] of cell $procdff$61 ($dff)
    port Q[2] of cell $procdff$62 ($dff)
Warning: multiple conflicting drivers for counter_b4.\mem [1]:
    port Q[1] of cell $procdff$61 ($dff)
    port Q[1] of cell $procdff$62 ($dff)
Warning: multiple conflicting drivers for counter_b4.\mem [0]:
    port Q[0] of cell $procdff$61 ($dff)
    port Q[0] of cell $procdff$62 ($dff)
found and reported 4 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
  Cell `$procmux$29_CMP0' is identical to cell `$procmux$12_CMP0'.
    Redirecting output \Y: $procmux$29_CMP = $procmux$12_CMP
    Removing $eq cell `$procmux$29_CMP0' from module `\counter_b4'.
  Cell `$procmux$33_CMP0' is identical to cell `$procmux$13_CMP0'.
    Redirecting output \Y: $procmux$33_CMP = $procmux$13_CMP
    Removing $eq cell `$procmux$33_CMP0' from module `\counter_b4'.
  Cell `$procmux$37_CMP0' is identical to cell `$procmux$14_CMP0'.
    Redirecting output \Y: $procmux$37_CMP = $procmux$14_CMP
    Removing $eq cell `$procmux$37_CMP0' from module `\counter_b4'.
  Cell `$procmux$41_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$41_CMP = $procmux$15_CMP
    Removing $logic_not cell `$procmux$41_CMP0' from module `\counter_b4'.
  Cell `$procmux$49_CMP0' is identical to cell `$procmux$12_CMP0'.
    Redirecting output \Y: $procmux$49_CMP = $procmux$12_CMP
    Removing $eq cell `$procmux$49_CMP0' from module `\counter_b4'.
  Cell `$procmux$50_CMP0' is identical to cell `$procmux$13_CMP0'.
    Redirecting output \Y: $procmux$50_CMP = $procmux$13_CMP
    Removing $eq cell `$procmux$50_CMP0' from module `\counter_b4'.
  Cell `$procmux$51_CMP0' is identical to cell `$procmux$14_CMP0'.
    Redirecting output \Y: $procmux$51_CMP = $procmux$14_CMP
    Removing $eq cell `$procmux$51_CMP0' from module `\counter_b4'.
  Cell `$procmux$52_CMP0' is identical to cell `$procmux$15_CMP0'.
    Redirecting output \Y: $procmux$52_CMP = $procmux$15_CMP
    Removing $logic_not cell `$procmux$52_CMP0' from module `\counter_b4'.
Removed a total of 8 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_b4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$57 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_b4.
    New ctrl vector for $pmux cell $procmux$48: { $auto$opt_reduce.cc:132:opt_mux$64 $procmux$12_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$63: { $procmux$13_CMP $procmux$14_CMP $procmux$15_CMP }
  Optimizing cells in module \counter_b4.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_b4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$57 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_b4.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell counter_b4.$add$counter_b4.v:60$4 ($add).
Removed top 28 bits (of 32) from port Y of cell counter_b4.$add$counter_b4.v:60$4 ($add).
Removed top 31 bits (of 32) from port B of cell counter_b4.$sub$counter_b4.v:75$6 ($sub).
Removed top 28 bits (of 32) from port Y of cell counter_b4.$sub$counter_b4.v:75$6 ($sub).
Removed top 30 bits (of 32) from port B of cell counter_b4.$sub$counter_b4.v:91$8 ($sub).
Removed top 28 bits (of 32) from port Y of cell counter_b4.$sub$counter_b4.v:91$8 ($sub).
Removed top 30 bits (of 32) from port B of cell counter_b4.$le$counter_b4.v:94$9 ($le).
Removed top 1 bits (of 2) from port B of cell counter_b4.$procmux$14_CMP0 ($eq).
Removed top 28 bits (of 32) from wire counter_b4.$add$counter_b4.v:60$4_Y.

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module counter_b4:
  creating $macc model for $add$counter_b4.v:60$4 ($add).
  creating $macc model for $sub$counter_b4.v:75$6 ($sub).
  creating $macc model for $sub$counter_b4.v:91$8 ($sub).
  creating $alu model for $macc $sub$counter_b4.v:91$8.
  creating $alu model for $macc $sub$counter_b4.v:75$6.
  creating $alu model for $macc $add$counter_b4.v:60$4.
  creating $alu model for $le$counter_b4.v:94$9 ($le): new $alu
  creating $alu cell for $le$counter_b4.v:94$9: $auto$alumacc.cc:470:replace_alu$67
  creating $alu cell for $add$counter_b4.v:60$4: $auto$alumacc.cc:470:replace_alu$80
  creating $alu cell for $sub$counter_b4.v:75$6: $auto$alumacc.cc:470:replace_alu$83
  creating $alu cell for $sub$counter_b4.v:91$8: $auto$alumacc.cc:470:replace_alu$86
  created 4 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_b4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$57 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_b4.
    New input vector for $reduce_or cell $auto$alumacc.cc:502:replace_alu$78: { $auto$rtlil.cc:1600:Not$77 $auto$rtlil.cc:1603:ReduceAnd$71 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$70: { $auto$alumacc.cc:483:replace_alu$68 [0] $auto$alumacc.cc:483:replace_alu$68 [1] $auto$alumacc.cc:483:replace_alu$68 [2] $auto$alumacc.cc:483:replace_alu$68 [3] }
  Optimizing cells in module \counter_b4.
Performed a total of 2 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_b4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$57 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_b4.
Performed a total of 0 changes.

3.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.10.15. Executing OPT_EXPR pass (perform const folding).

3.10.16. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$31' (mux_bool) in module `\counter_b4' with constant driver `$procmux$31_Y = $auto$rtlil.cc:1604:ReduceOr$79'.
Replacing $mux cell `$procmux$35' (mux_bool) in module `\counter_b4' with constant driver `$procmux$35_Y = $eq$counter_b4.v:78$7_Y'.
Replacing $mux cell `$procmux$39' (mux_bool) in module `\counter_b4' with constant driver `$procmux$39_Y = $eq$counter_b4.v:63$5_Y'.
Replacing $mux cell `$procmux$43' in module `counter_b4' with and-gate.
Replacing $mux cell `$procmux$54' in module `counter_b4' with and-gate.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_b4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$20 (pure)
    Root of a mux tree: $procmux$26 (pure)
    Root of a mux tree: $procmux$28 (pure)
    Root of a mux tree: $procmux$46 (pure)
    Root of a mux tree: $procmux$48 (pure)
    Root of a mux tree: $procmux$57 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_b4.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4'.

3.18.3. Continuing TECHMAP pass.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$80 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4.
Mapping counter_b4.$eq$counter_b4.v:63$5 ($eq) with simplemap.
Mapping counter_b4.$eq$counter_b4.v:78$7 ($logic_not) with simplemap.
Mapping counter_b4.$procmux$12_CMP0 ($eq) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 2
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=2\Y_WIDTH=4'.

3.18.5. Continuing TECHMAP pass.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$86 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=2\Y_WIDTH=4.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4'.

3.18.7. Continuing TECHMAP pass.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$83 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=4'.

3.18.9. Continuing TECHMAP pass.
Mapping counter_b4.$procmux$11 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=4.
Mapping counter_b4.$procmux$13_CMP0 ($eq) with simplemap.
Mapping counter_b4.$procmux$14_CMP0 ($eq) with simplemap.
Mapping counter_b4.$procmux$15_CMP0 ($logic_not) with simplemap.
Mapping counter_b4.$procmux$17 ($mux) with simplemap.
Mapping counter_b4.$procmux$20 ($mux) with simplemap.
Mapping counter_b4.$procmux$23 ($mux) with simplemap.
Mapping counter_b4.$procmux$26 ($mux) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 2
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=4\Y_WIDTH=4'.

3.18.11. Continuing TECHMAP pass.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$67 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=4\Y_WIDTH=4.

3.18.12. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=4'.

3.18.13. Continuing TECHMAP pass.
Mapping counter_b4.$procmux$28 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=4.
Mapping counter_b4.$auto$alumacc.cc:502:replace_alu$78 ($reduce_or) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:58:get_gt$76 ($not) with simplemap.
Mapping counter_b4.$procmux$43 ($and) with simplemap.
Mapping counter_b4.$procmux$46 ($mux) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:64:get_eq$70 ($reduce_and) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=2'.

3.18.15. Continuing TECHMAP pass.
Mapping counter_b4.$procmux$48 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.
Mapping counter_b4.$auto$alumacc.cc:78:get_cf$72 ($not) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:58:get_gt$74 ($or) with simplemap.
Mapping counter_b4.$auto$opt_reduce.cc:126:opt_mux$63 ($reduce_or) with simplemap.
Mapping counter_b4.$procmux$54 ($and) with simplemap.
Mapping counter_b4.$procmux$57 ($mux) with simplemap.
Mapping counter_b4.$procdff$59 ($dff) with simplemap.
Mapping counter_b4.$procdff$60 ($dff) with simplemap.
Mapping counter_b4.$procdff$61 ($dff) with simplemap.
Mapping counter_b4.$procdff$62 ($dff) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:262$136 ($xor) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:263$137 ($xor) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.$and$<techmap.v>:260$135 ($and) with simplemap.

3.18.16. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=4'.

3.18.17. Executing PROC pass (convert processes to netlists).

3.18.17.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.17.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.17.3. Executing PROC_INIT pass (extract init attributes).

3.18.17.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.17.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$294'.
     1/8: $0\p[3:0] [2]
     2/8: $0\g[3:0] [2]
     3/8: $0\p[3:0] [3]
     4/8: $0\g[3:0] [3]
     5/8: $0\p[3:0] [1]
     6/8: $0\g[3:0] [1]
     7/8: $0\g[3:0] [0]
     8/8: $0\p[3:0] [0]

3.18.17.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\p' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$294'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\g' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$294'.

3.18.17.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.17.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$294'.
Cleaned up 0 empty switches.

3.18.18. Executing OPT pass (performing simple optimizations).

3.18.18.1. Executing OPT_EXPR pass (perform const folding).

3.18.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=4'.
Removed a total of 0 cells.

3.18.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=4..
  removing unused `$and' cell `$and$<techmap.v>:222$299'.
  removing unused `$and' cell `$and$<techmap.v>:222$305'.
  removing unused `$and' cell `$and$<techmap.v>:230$308'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.18.5. Finished fast OPT passes.

3.18.19. Continuing TECHMAP pass.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$80.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.$ternary$<techmap.v>:258$134 ($mux) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.$not$<techmap.v>:258$133 ($not) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$80.B_conv ($pos) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$80.A_conv ($pos) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:262$172 ($xor) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:263$173 ($xor) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.$and$<techmap.v>:260$171 ($and) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$86.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.$ternary$<techmap.v>:258$170 ($mux) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.$not$<techmap.v>:258$169 ($not) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$86.B_conv ($pos) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$86.A_conv ($pos) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:262$177 ($xor) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:263$178 ($xor) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.$and$<techmap.v>:260$176 ($and) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$83.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$<techmap.v>:258$175 ($mux) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.$not$<techmap.v>:258$174 ($not) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$83.B_conv ($pos) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$83.A_conv ($pos) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$reduce_or$<techmap.v>:441$187 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$reduce_or$<techmap.v>:441$188 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$reduce_or$<techmap.v>:441$186 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$reduce_or$<techmap.v>:441$185 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$and$<techmap.v>:434$184 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$and$<techmap.v>:434$183 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$and$<techmap.v>:434$182 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$and$<techmap.v>:434$181 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$ternary$<techmap.v>:445$180 ($mux) with simplemap.
Mapping counter_b4.$techmap$procmux$11.$reduce_or$<techmap.v>:445$179 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.$xor$<techmap.v>:262$231 ($xor) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.$xor$<techmap.v>:263$232 ($xor) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.$and$<techmap.v>:260$230 ($and) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$67.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.$ternary$<techmap.v>:258$229 ($mux) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228 ($not) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$67.B_conv ($pos) with simplemap.
Mapping counter_b4.$auto$alumacc.cc:470:replace_alu$67.A_conv ($pos) with simplemap.
Mapping counter_b4.$techmap$procmux$28.$and$<techmap.v>:434$238 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$28.$reduce_or$<techmap.v>:441$239 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$procmux$28.$and$<techmap.v>:434$237 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$28.$and$<techmap.v>:434$236 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$28.$and$<techmap.v>:434$235 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$28.$ternary$<techmap.v>:445$234 ($mux) with simplemap.
Mapping counter_b4.$techmap$procmux$28.$reduce_or$<techmap.v>:445$233 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$procmux$48.$and$<techmap.v>:434$253 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$48.$reduce_or$<techmap.v>:441$254 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$procmux$48.$and$<techmap.v>:434$252 ($and) with simplemap.
Mapping counter_b4.$techmap$procmux$48.$ternary$<techmap.v>:445$251 ($mux) with simplemap.
Mapping counter_b4.$techmap$procmux$48.$reduce_or$<techmap.v>:445$250 ($reduce_or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$or$<techmap.v>:229$307 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$or$<techmap.v>:221$304 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$or$<techmap.v>:221$301 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$or$<techmap.v>:221$298 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$or$<techmap.v>:212$296 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:229$306 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:222$302 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:221$303 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:221$300 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:221$297 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:212$295 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:212$295 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:221$297 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:221$300 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:221$303 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:222$302 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:229$306 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$or$<techmap.v>:212$296 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$or$<techmap.v>:221$298 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$or$<techmap.v>:221$301 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$or$<techmap.v>:221$304 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$or$<techmap.v>:229$307 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:212$295 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:221$297 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:221$300 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:221$303 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:222$302 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:229$306 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$or$<techmap.v>:212$296 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$or$<techmap.v>:221$298 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$or$<techmap.v>:221$301 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$or$<techmap.v>:221$304 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$or$<techmap.v>:229$307 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:212$295 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:221$297 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:221$300 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:221$303 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:222$302 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:229$306 ($and) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$or$<techmap.v>:212$296 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$or$<techmap.v>:221$298 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$or$<techmap.v>:221$301 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$or$<techmap.v>:221$304 ($or) with simplemap.
Mapping counter_b4.$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$or$<techmap.v>:229$307 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$336' (0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$not$<techmap.v>:258$169_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$332' (011) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$ternary$<techmap.v>:258$170_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$328' (?1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$and$<techmap.v>:260$171_Y [2] = \mem [2]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$335' (1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$not$<techmap.v>:258$169_Y [1] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$331' (101) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$ternary$<techmap.v>:258$170_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$327' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$and$<techmap.v>:260$171_Y [1] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$334' (1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$not$<techmap.v>:258$169_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$330' (101) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$ternary$<techmap.v>:258$170_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$326' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$and$<techmap.v>:260$171_Y [0] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$337' (0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$not$<techmap.v>:258$169_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$333' (011) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$ternary$<techmap.v>:258$170_Y [3] = 1'1'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$318' (?0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:262$172_Y [1] = \mem [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$317' (?0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:262$172_Y [0] = \mem [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$458' (?1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:212$295_Y = \mem [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$464' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$88 [0] = \mem [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$465' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$88 [1] = $techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:221$297_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$329' (?1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$and$<techmap.v>:260$171_Y [3] = \mem [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$325' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:263$173_Y [4] = $auto$alumacc.cc:484:replace_alu$88 [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$309' (??0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$ternary$<techmap.v>:258$134_Y [0] = \mem [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$191' (?0) in module `\counter_b4' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$189 [0] = \b4_mode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$202' (?0) in module `\counter_b4' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$199 [1] = \b4_mode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$277' (?0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:263$137_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:262$136_Y [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$355' (1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$not$<techmap.v>:258$174_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$351' (101) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$<techmap.v>:258$175_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$338' (?0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:262$177_Y [0] = \mem [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$310' (??0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$ternary$<techmap.v>:258$134_Y [1] = \mem [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$274' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:262$136_Y [1] = \mem [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$282' (1?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$and$<techmap.v>:260$135_Y [0] = \mem [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$457' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:212$295_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$451' (?0) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$82 [0] = \mem [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$356' (0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$not$<techmap.v>:258$174_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$352' (011) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$<techmap.v>:258$175_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$347' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$and$<techmap.v>:260$176_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$469' (?1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:212$295_Y = \mem [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$475' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$85 [0] = \mem [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$311' (??0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$ternary$<techmap.v>:258$134_Y [2] = \mem [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$275' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:262$136_Y [2] = \mem [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$283' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$and$<techmap.v>:260$135_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$450' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$82 [1] = $techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:221$297_Y'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$357' (0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$not$<techmap.v>:258$174_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$353' (011) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$<techmap.v>:258$175_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$348' (?1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$and$<techmap.v>:260$176_Y [1] = \mem [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$312' (??0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$ternary$<techmap.v>:258$134_Y [3] = \mem [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$276' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:262$136_Y [3] = \mem [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$284' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$and$<techmap.v>:260$135_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$447' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$82 [2] = $techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:229$306_Y'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$358' (0) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$not$<techmap.v>:258$174_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$354' (011) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$ternary$<techmap.v>:258$175_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$349' (?1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$and$<techmap.v>:260$176_Y [2] = \mem [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$419' (??1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$ternary$<techmap.v>:258$229_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$406' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$xor$<techmap.v>:262$231_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$420' (??1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$ternary$<techmap.v>:258$229_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$407' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$xor$<techmap.v>:262$231_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$417' (??1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$ternary$<techmap.v>:258$229_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$404' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$xor$<techmap.v>:262$231_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$418' (??1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$ternary$<techmap.v>:258$229_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$414' (1?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$and$<techmap.v>:260$230_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$413' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$and$<techmap.v>:260$230_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$480' (?1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:212$295_Y = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$486' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$69 [0] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$416' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$and$<techmap.v>:260$230_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$415' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$and$<techmap.v>:260$230_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$482' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:221$300_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$488' (00) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$or$<techmap.v>:221$301_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$489' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$69 [3] = $techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:221$303_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$433' (const_and) in module `\counter_b4' with constant driver `$techmap$procmux$28.$and$<techmap.v>:434$235_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$427' (0?) in module `\counter_b4' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$426 [0] = $techmap$procmux$28.$and$<techmap.v>:434$236_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$440' (const_and) in module `\counter_b4' with constant driver `$techmap$procmux$48.$and$<techmap.v>:434$253_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$443' (1?) in module `\counter_b4' with constant driver `$techmap$procmux$48.$and$<techmap.v>:434$252_Y = $procmux$12_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$442' (?0) in module `\counter_b4' with constant driver `$techmap$procmux$48.$reduce_or$<techmap.v>:441$254_Y = $procmux$12_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$285' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$and$<techmap.v>:260$135_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$455' (const_and) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:221$300_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$449' (00) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$or$<techmap.v>:221$301_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$448' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$82 [3] = $techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:221$303_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$281' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:263$137_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:221$303_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$350' (?1) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$and$<techmap.v>:260$176_Y [3] = \mem [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$346' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:263$178_Y [4] = $auto$alumacc.cc:484:replace_alu$85 [3]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$490' (0?) in module `\counter_b4' with constant driver `$auto$alumacc.cc:484:replace_alu$69 [2] = $techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:229$306_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$412' (0?) in module `\counter_b4' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$67.$xor$<techmap.v>:263$232_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:221$303_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
  Cell `$auto$simplemap.cc:37:simplemap_not$313' is identical to cell `$auto$simplemap.cc:37:simplemap_not$421'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$80.$not$<techmap.v>:258$133_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$313' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$342' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$321'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:263$178_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:263$173_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$342' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$456' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$459'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$80.lcu.$and$<techmap.v>:221$297_Y = $techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:221$297_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$456' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$278' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$322'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:263$137_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:263$173_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$278' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$273' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$321'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$80.$xor$<techmap.v>:262$136_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:263$173_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$273' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$258' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$401'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$257 = $auto$simplemap.cc:127:simplemap_reduce$399 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$258' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$246' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$484'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$245 [0] = $techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:222$302_Y
    Removing $_AND_ cell `$auto$simplemap.cc:136:simplemap_reduce$246' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$436' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$400'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$435 [0] = $auto$simplemap.cc:127:simplemap_reduce$399 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$436' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$437' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$401'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$435 [1] = $auto$simplemap.cc:127:simplemap_reduce$399 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$437' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$481' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$247'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$67.lcu.$and$<techmap.v>:221$297_Y = $auto$simplemap.cc:127:simplemap_reduce$245 [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$481' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$320' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$341'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:262$172_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:262$177_Y [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$320' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$161' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$201'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$159 [0] = $auto$simplemap.cc:250:simplemap_eqne$199 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$161' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$162' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$192'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$159 [1] = $auto$simplemap.cc:250:simplemap_eqne$189 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$162' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$142' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$319'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$138 [2] = $techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:262$172_Y [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$142' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$141' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$339'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$138 [1] = $techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:262$177_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$141' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$140' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$321'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$138 [0] = $techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:263$173_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$140' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$143' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$341'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$138 [3] = $techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:262$177_Y [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$143' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:37:simplemap_not$315' is identical to cell `$auto$simplemap.cc:37:simplemap_not$423'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$80.$not$<techmap.v>:258$133_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [2]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$315' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:37:simplemap_not$316' is identical to cell `$auto$simplemap.cc:37:simplemap_not$424'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$80.$not$<techmap.v>:258$133_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [3]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$316' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$340' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$319'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$83.$xor$<techmap.v>:262$177_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$86.$xor$<techmap.v>:262$172_Y [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$340' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:37:simplemap_not$314' is identical to cell `$auto$simplemap.cc:37:simplemap_not$422'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$80.$not$<techmap.v>:258$133_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$67.$not$<techmap.v>:258$228_Y [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$314' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$439' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$403'.
    Redirecting output \Y: $techmap$procmux$28.$reduce_or$<techmap.v>:445$233_Y = $techmap$procmux$11.$reduce_or$<techmap.v>:445$179_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$439' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$462' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$473'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:222$302_Y = $techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:222$302_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$462' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$471' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$460'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$and$<techmap.v>:221$300_Y = $techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$and$<techmap.v>:221$300_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$471' from module `\counter_b4'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$477' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$466'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$83.lcu.$or$<techmap.v>:221$301_Y = $techmap$auto$alumacc.cc:470:replace_alu$86.lcu.$or$<techmap.v>:221$301_Y
    Removing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$477' from module `\counter_b4'.
Removed a total of 25 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$408'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$409'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$410'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:85:simplemap_bitop$411'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$453'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$454'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$460'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$461'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$466'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$467'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$472'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$473'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$478'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$485'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\counter_b4' to `<abc-temp-dir>/input.blif'..
Extracted 116 gates and 132 wires to a netlist network with 14 inputs and 10 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       20
ABC RESULTS:              AOI3 cells:        6
ABC RESULTS:               MUX cells:       12
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:              OAI4 cells:        6
ABC RESULTS:                OR cells:        7
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:      108
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:       10
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$491$auto$blifparse.cc:286:parse_blif$531' in module `counter_b4'.
Optimizing away select inverter for $_MUX_ cell `$abc$491$auto$blifparse.cc:286:parse_blif$518' in module `counter_b4'.
Optimizing away select inverter for $_MUX_ cell `$abc$491$auto$blifparse.cc:286:parse_blif$507' in module `counter_b4'.
Optimizing away select inverter for $_MUX_ cell `$abc$491$auto$blifparse.cc:286:parse_blif$546' in module `counter_b4'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
  Cell `$abc$491$auto$blifparse.cc:286:parse_blif$526' is identical to cell `$abc$491$auto$blifparse.cc:286:parse_blif$524'.
    Redirecting output \Y: $abc$491$n59 = $abc$491$n57
    Removing $_XOR_ cell `$abc$491$auto$blifparse.cc:286:parse_blif$526' from module `\counter_b4'.
Removed a total of 1 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..
  removing unused `$_NOT_' cell `$abc$491$auto$blifparse.cc:286:parse_blif$492'.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \counter_b4

3.22.2. Analyzing design hierarchy..
Top module:  \counter_b4
Removed 0 unused modules.

3.23. Printing statistics.

=== counter_b4 ===

   Number of wires:                 80
   Number of wire bits:             96
   Number of public wires:           9
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $_AND_                         20
     $_AOI3_                         6
     $_DFF_P_                       10
     $_MUX_                         12
     $_NAND_                         5
     $_NOR_                          2
     $_NOT_                         11
     $_OAI3_                         2
     $_OAI4_                         6
     $_OR_                           7
     $_XNOR_                         1
     $_XOR_                          5

3.24. Executing CHECK pass (checking for obvious problems).
checking module counter_b4..
Warning: multiple conflicting drivers for counter_b4.\mem [3]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$268 ($_DFF_P_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$272 ($_DFF_P_)
Warning: multiple conflicting drivers for counter_b4.\mem [2]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$267 ($_DFF_P_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$271 ($_DFF_P_)
Warning: multiple conflicting drivers for counter_b4.\mem [1]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$266 ($_DFF_P_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$270 ($_DFF_P_)
Warning: multiple conflicting drivers for counter_b4.\mem [0]:
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$265 ($_DFF_P_)
    port Q[0] of cell $auto$simplemap.cc:420:simplemap_dff$269 ($_DFF_P_)
found and reported 4 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\counter_b4':
  mapped 10 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_b4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_b4.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\counter_b4' to `<abc-temp-dir>/input.blif'..
Extracted 77 gates and 90 wires to a netlist network with 13 inputs and 10 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        6
ABC RESULTS:           AOI22X1 cells:        7
ABC RESULTS:             INVX1 cells:       15
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:           NAND3X1 cells:        2
ABC RESULTS:            NOR2X1 cells:       14
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:        internal signals:       67
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:       10
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 91 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port counter_b4.b4_D: Missing option -inpad.
Mapping port counter_b4.b4_Q using BUFX2.
Don't map input port counter_b4.b4_clk: Missing option -inpad.
Don't map input port counter_b4.b4_enable: Missing option -inpad.
Mapping port counter_b4.b4_load using BUFX2.
Don't map input port counter_b4.b4_mode: Missing option -inpad.
Mapping port counter_b4.b4_rco using BUFX2.
Don't map input port counter_b4.b4_reset: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_b4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_b4.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_b4'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_b4..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

End of script. Logfile hash: 7c75b36eea
CPU: user 0.29s system 0.02s, MEM: 38.06 MB total, 10.96 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 16% 1x share (0 sec), 13% 17x opt_clean (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 11 (load 639.841) from node _6_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.73692 (latency = 547.385 ps)
Top input node fanout is 10 (load 405.158) from node b4_clk.
Warning 1: load of 649.841 is 2.07204 times greater than strongest gate DFFPOSX1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
11 gates exceed specified minimum load.
0 buffers were added.
3 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 68    	Out: 65    	-3
	"2" gates	In: 10    	Out: 11    	+1

gates resized: 3
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 11 (load 639.841) from node _6_,
driven by INVX4 with strength 417.401 (fF driven at latency 200)
Top fanout load-to-strength ratio is 2.04015 (latency = 408.031 ps)
Top input node fanout is 10 (load 405.158) from node b4_clk.
Warning 1: load of 649.841 is 2.07204 times greater than strongest gate DFFPOSX1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
12 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 65    	Out: 65    	+0
	"2" gates	In: 11    	Out: 11    	+0
	"4" gates	In: 2    	Out: 2    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4
Files:
   Verilog: /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/counter_b4.rtl.v
   Verilog: /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/counter_b4.rtlnopwr.v
   Spice:   /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/counter_b4.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on Sun Dec 6 12:17:18 CST 2020
Running blif2cel.tcl
Loaded LEF file (/usr/share/qflow/tech/osu035/osu035_stdcells.lef) for reading...
Loaded BLIF file (/home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/counter_b4.blif) for reading ...
Loaded CEL file (/home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/layout/counter_b4.cel) for writing...
1st pass of blif file /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/counter_b4.blif. . .
Reading macros from LEF file. . .
Parsing macro AND2X2:  Ports are:
parse_pin
macroname: AND2X2, pinname: A
Port type: INPUT 
A -240 -261 1
parse_pin
macroname: AND2X2, pinname: B
Port type: INPUT 
B -80 -100 1
parse_pin
macroname: AND2X2, pinname: gnd
Port type: INOUT 
gnd 0 -1000 1
parse_pin
macroname: AND2X2, pinname: Y
Port type: OUTPUT 
Y 179 -680 1
parse_pin
macroname: AND2X2, pinname: vdd
Port type: INOUT 
vdd 80 590 1
Parsing macro AOI21X1:  Ports are:
parse_pin
macroname: AOI21X1, pinname: A
Port type: INPUT 
A -160 -70 1
parse_pin
macroname: AOI21X1, pinname: B
Port type: INPUT 
B -80 -261 1
parse_pin
macroname: AOI21X1, pinname: C
Port type: INPUT 
C 240 -501 1
parse_pin
macroname: AOI21X1, pinname: gnd
Port type: INOUT 
gnd 240 -870 1
parse_pin
macroname: AOI21X1, pinname: Y
Port type: OUTPUT 
Y 80 -680 1
parse_pin
macroname: AOI21X1, pinname: vdd
Port type: INOUT 
vdd 0 999 1
Parsing macro AOI22X1:  Ports are:
parse_pin
macroname: AOI22X1, pinname: A
Port type: INPUT 
A -240 -70 1
parse_pin
macroname: AOI22X1, pinname: B
Port type: INPUT 
B -160 -261 1
parse_pin
macroname: AOI22X1, pinname: C
Port type: INPUT 
C 320 -61 1
parse_pin
macroname: AOI22X1, pinname: D
Port type: INPUT 
D 140 -180 1
parse_pin
macroname: AOI22X1, pinname: gnd
Port type: INOUT 
gnd 320 -770 1
parse_pin
macroname: AOI22X1, pinname: Y
Port type: OUTPUT 
Y 10 -431 1
parse_pin
macroname: AOI22X1, pinname: vdd
Port type: INOUT 
vdd 0 999 1
Parsing macro BUFX2:  Ports are:
parse_pin
macroname: BUFX2, pinname: A
Port type: INPUT 
A -160 -140 1
parse_pin
macroname: BUFX2, pinname: gnd
Port type: INOUT 
gnd 0 -1000 1
parse_pin
macroname: BUFX2, pinname: Y
Port type: OUTPUT 
Y 170 0 1
parse_pin
macroname: BUFX2, pinname: vdd
Port type: INOUT 
vdd 0 999 1
Parsing macro DFFPOSX1:  Ports are:
parse_pin
macroname: DFFPOSX1, pinname: Q
Port type: OUTPUT 
Q 580 -420 1
parse_pin
macroname: DFFPOSX1, pinname: CLK
Port type: INPUT 
CLK -500 -280 1
parse_pin
macroname: DFFPOSX1, pinname: D
Port type: INPUT 
D -450 -111 1
parse_pin
macroname: DFFPOSX1, pinname: gnd
Port type: INOUT 
gnd -170 -870 1
parse_pin
macroname: DFFPOSX1, pinname: vdd
Port type: INOUT 
vdd -160 770 1
Parsing macro INVX1:  Ports are:
parse_pin
macroname: INVX1, pinname: A
Port type: INPUT 
A -80 -540 1
parse_pin
macroname: INVX1, pinname: gnd
Port type: INOUT 
gnd 0 -1000 1
parse_pin
macroname: INVX1, pinname: Y
Port type: OUTPUT 
Y 80 0 1
parse_pin
macroname: INVX1, pinname: vdd
Port type: INOUT 
vdd 0 999 1
Parsing macro INVX2:  Ports are:
parse_pin
macroname: INVX2, pinname: A
Port type: INPUT 
A -80 -340 1
parse_pin
macroname: INVX2, pinname: gnd
Port type: INOUT 
gnd 0 -1000 1
parse_pin
macroname: INVX2, pinname: Y
Port type: OUTPUT 
Y 80 0 1
parse_pin
macroname: INVX2, pinname: vdd
Port type: INOUT 
vdd 0 999 1
Parsing macro INVX4:  Ports are:
parse_pin
macroname: INVX4, pinname: A
Port type: INPUT 
A -160 -340 1
parse_pin
macroname: INVX4, pinname: gnd
Port type: INOUT 
gnd 160 -770 1
parse_pin
macroname: INVX4, pinname: Y
Port type: OUTPUT 
Y 0 0 1
parse_pin
macroname: INVX4, pinname: vdd
Port type: INOUT 
vdd 160 570 1
Parsing macro NAND2X1:  Ports are:
parse_pin
macroname: NAND2X1, pinname: A
Port type: INPUT 
A -160 -340 1
parse_pin
macroname: NAND2X1, pinname: B
Port type: INPUT 
B 160 140 1
parse_pin
macroname: NAND2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1000 1
parse_pin
macroname: NAND2X1, pinname: Y
Port type: OUTPUT 
Y 100 -680 1
parse_pin
macroname: NAND2X1, pinname: vdd
Port type: INOUT 
vdd 160 770 1
Parsing macro NAND3X1:  Ports are:
parse_pin
macroname: NAND3X1, pinname: A
Port type: INPUT 
A -240 60 1
parse_pin
macroname: NAND3X1, pinname: B
Port type: INPUT 
B -40 -100 1
parse_pin
macroname: NAND3X1, pinname: C
Port type: INPUT 
C 80 260 1
parse_pin
macroname: NAND3X1, pinname: gnd
Port type: INOUT 
gnd 0 -1000 1
parse_pin
macroname: NAND3X1, pinname: Y
Port type: OUTPUT 
Y -80 680 1
parse_pin
macroname: NAND3X1, pinname: vdd
Port type: INOUT 
vdd 80 790 1
Parsing macro NOR2X1:  Ports are:
parse_pin
macroname: NOR2X1, pinname: A
Port type: INPUT 
A -160 -540 1
parse_pin
macroname: NOR2X1, pinname: B
Port type: INPUT 
B 160 -61 1
parse_pin
macroname: NOR2X1, pinname: gnd
Port type: INOUT 
gnd 160 -870 1
parse_pin
macroname: NOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -300 1
parse_pin
macroname: NOR2X1, pinname: vdd
Port type: INOUT 
vdd 0 999 1
Parsing macro OAI21X1:  Ports are:
parse_pin
macroname: OAI21X1, pinname: A
Port type: INPUT 
A -160 -330 1
parse_pin
macroname: OAI21X1, pinname: B
Port type: INPUT 
B -80 -140 1
parse_pin
macroname: OAI21X1, pinname: C
Port type: INPUT 
C 160 300 1
parse_pin
macroname: OAI21X1, pinname: gnd
Port type: INOUT 
gnd 0 -1000 1
parse_pin
macroname: OAI21X1, pinname: Y
Port type: OUTPUT 
Y 50 -100 1
parse_pin
macroname: OAI21X1, pinname: vdd
Port type: INOUT 
vdd 179 770 1
Parsing macro OR2X2:  Ports are:
parse_pin
macroname: OR2X2, pinname: A
Port type: INPUT 
A -240 -540 1
parse_pin
macroname: OR2X2, pinname: B
Port type: INPUT 
B -40 -221 1
parse_pin
macroname: OR2X2, pinname: gnd
Port type: INOUT 
gnd 80 -790 1
parse_pin
macroname: OR2X2, pinname: Y
Port type: OUTPUT 
Y 240 -100 1
parse_pin
macroname: OR2X2, pinname: vdd
Port type: INOUT 
vdd 0 999 1
Parsing macro XNOR2X1:  Ports are:
parse_pin
macroname: XNOR2X1, pinname: A
Port type: INPUT 
A -210 -360 1
parse_pin
macroname: XNOR2X1, pinname: B
Port type: INPUT 
B 439 -300 1
parse_pin
macroname: XNOR2X1, pinname: gnd
Port type: INOUT 
gnd -310 -711 1
parse_pin
macroname: XNOR2X1, pinname: Y
Port type: OUTPUT 
Y 50 -500 1
parse_pin
macroname: XNOR2X1, pinname: vdd
Port type: INOUT 
vdd -300 640 1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
No counter_b4.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement

twflow version:2.1 date:Mon May 25 21:15:08 EDT 1992
Authors: Bill Swartz, Carl Sechen
         Yale University

syntax version:v1.1 date:Mon May 25 21:11:10 EDT 1992
TimberWolf System Syntax Checker
Authors: Carl Sechen, Kai-Win Lee, Bill Swartz,
         Dahe Chen, and Jimmy Lam
         Yale University

Read   50 objects so far...
No syntax errors were found

syntax terminated normally with no errors and 0 warning[s]


----------------------------
Total stdcells     :78
Total cell width   :5.58e+04
Total cell height  :1.56e+05
Total cell area    :1.12e+08
Total core area    :1.12e+08
Average cell height:2.00e+03


nocut - replacement for Mincut version:v1.0 date:Mon May 25 21:09:40 EDT 1992
TimberWolf System Floorplan Setup Program
Authors: Carl Sechen, Bill Swartz,
         Yale University

Read   50 objects so far...
Splitting counter_b4.cel into counter_b4.scel and counter_b4.mcel...
	done!


nocut - replacement for Mincut terminated normally with no errors and 0 warning[s]


TimberWolfMC version:v2.2 date:Mon May 25 21:18:34 EDT 1992
Authors: Carl Sechen, Bill Swartz, Kai-Win Lee
         Dahe Chen, and Jimmy Lam
         Yale University

config version:v1.0 date:Mon May 25 20:57:18 EDT 1992
Row configuration program
    Yale University


config switches:
	Graphics mode on
	config will inherit window


Note: restore state file exists:counter_b4


config terminated normally with no errors and 0 warning[s]


TimberWolfMC terminated normally with no errors and 0 warning[s]



TimberWolfSC switches:
	Graphics mode on
	TimberWolfSC will inherit window

TimberWolfSC version:v6.0 date:Mon May 25 21:19:07 EDT 1992
Row-Based Placement and Global Routing Program
Authors: Carl Sechen, Kai-Win Lee, and Bill Swartz,
         Yale University
  0 
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 
 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30 
 31  32  33  34  35  36  37  38  39  40  41  42  43  44  45 
 46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 
 61  62  63  64  65  66  67  68  69  70  71  72  73  74  75 
 76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 
 91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 
106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 
121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 
136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 
151 152 153 154 155 156 157 158 
 block left edge is at -399
 the longest block length is 15520
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:3   Its length is:14080
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   27
 tracks =  25 at attempts =  1000
 tracks =  25 at attempts =  2000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 15520
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:3   Its length is:14080
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   29
 tracks =  26 at attempts =  1000
 tracks =  26 at attempts =  2000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 15520
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:3   Its length is:14080
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   28
 tracks =  24 at attempts =  1000
 tracks =  24 at attempts =  2000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 15520
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:3   Its length is:14080
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   28
 tracks =  28 at attempts =  1000
 tracks =  28 at attempts =  2000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 15520
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:3   Its length is:14080
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   27
 tracks =  24 at attempts =  1000
 tracks =  24 at attempts =  2000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 15520
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:3   Its length is:14080
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   29
 tracks =  25 at attempts =  1000
 tracks =  25 at attempts =  2000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 15520
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:3   Its length is:14080
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   28
 tracks =  24 at attempts =  1000
 tracks =  24 at attempts =  2000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 15520
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:3   Its length is:14080
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   29
 tracks =  28 at attempts =  1000
 tracks =  28 at attempts =  2000
 removing redundant feed-through pins
 the connectivity of all the nets is verified


***********************************************
*ACTUAL* FINAL NUMBER OF ROUTING TRACKS: 24
***********************************************


TimberWolfSC terminated normally with no errors and 0 warning[s]


twflow terminated normally with no errors and 0 warning[s]

Running getfillcell.tcl
Using cell FILL for fill
Running place2def.tcl
Limits: xbot = -750.0 ybot = -530.0 xtop = 14030.0 ytop = 7800
Core values: 80.0 100 14160.0 8100
Offsets: 80.0 100
4 routing layers
43 horizontal tracks from -400.0 to 8200.0 step 200 (M1, M3, ...)
94 vertical tracks from -480.0 to 14560.0 step 160.0 (M2, M4, ...)
Done with place2def.tcl
Running addspacers.tcl  counter_b4 /usr/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Running addspacers.tcl
Reading FILL macros from LEF file.
Reading DEF file counter_b4.def. . .
Number of rows is 4
Longest row has width 141.6 um
Analysis of DEF file:
Number of components = 78
New number of components = 81
Number of rows = 4
Done with addspacers.tcl
Running blifanno.tcl
Reading DEF file counter_b4.def. . .
Done with blifanno.tcl

Generating RTL verilog and SPICE netlist file in directory
   /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4
Files:
   Verilog: /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/counter_b4.rtl.v
   Verilog: /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/counter_b4.rtlnopwr.v
   Spice:   /home/belindabrown/Desktop/Designs_Verification/Design_Complete_Process/layout/projects/counter_b4/counter_b4.spc

Running blif2Verilog.
Running blif2BSpice.
Placement script ended on Sun Dec 6 12:17:22 CST 2020
Qrouter detail maze router version 1.3.80.T
No .cfg file specified, continuing without.
Reading LEF data from file /usr/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 106: Don't know how to parse layer "via1"
LEF Read, Line 107: No layer defined for RECT.
LEF Read, Line 115: Don't know how to parse layer "via2"
LEF Read, Line 116: No layer defined for RECT.
LEF Read, Line 124: Don't know how to parse layer "via3"
LEF Read, Line 125: No layer defined for RECT.
LEF Read, Line 131: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 135: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 136: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 140: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 141: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 142: Don't know how to parse layer "via1"
LEF Read, Line 143: No layer defined for RECT.
LEF Read, Line 147: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 151: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 152: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 156: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 157: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 158: Don't know how to parse layer "via2"
LEF Read, Line 159: No layer defined for RECT.
LEF Read, Line 163: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 167: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 168: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 172: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 173: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 174: Don't know how to parse layer "via3"
LEF Read, Line 175: No layer defined for RECT.
LEF Read, Line 179: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 186: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 193: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 200: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF file:  Defines site corner (ignored)
LEF file:  Defines site IO (ignored)
LEF file:  Defines site core (ignored)
LEF Read, Line 235: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 244: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 277: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 297: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 345: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 365: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 420: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 443: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 499: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 522: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 556: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 575: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 611: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 632: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 674: Don't know how to parse layer "via1"
LEF Read, Line 700: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 713: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 766: Don't know how to parse layer "via1"
LEF Read, Line 809: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 835: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 908: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 921: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 970: Don't know how to parse layer "via1"
LEF Read, Line 1054: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1068: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1115: Don't know how to parse layer "via1"
LEF Read, Line 1140: Don't know how to parse layer "via1"
LEF Read, Line 1188: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1200: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1235: Don't know how to parse layer "via1"
LEF Read, Line 1258: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1275: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1301: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1318: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1344: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1362: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1389: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1412: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1447: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1466: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1507: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1531: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1565: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1587: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1630: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1651: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1706: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1728: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1771: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1793: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1838: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1859: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1902: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1923: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1968: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1989: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2044: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2067: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2109: Don't know how to parse layer "via1"
LEF Read, Line 2151: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2174: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2210: Don't know how to parse layer "via1"
LEF Read, Line 2233: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2256: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2295: Don't know how to parse layer "via1"
LEF Read, Line 2340: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2351: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 2374: Don't know how to parse layer "via1"
LEF Read, Line 2437: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read:  Further errors will not be reported.
LEF read: Processed 3179 lines.
LEF Read: encountered 110 errors total.
Multiple vertical route layers at different pitches.  Using smaller pitch 1.6, will route on 1-of-N tracks if necessary.
Reading DEF data from file counter_b4.def.
Diagnostic: Design name: "counter_b4"
Multiple vertical route layers at different pitches.  Using pitch 1.6 and routing on 1-of-N tracks for larger pitches.
Multiple vertical route layers at different pitches.  Using pitch 1.6 and routing on 1-of-N tracks for larger pitches.
  Processed 81 subcell instances total.
  Processed 15 pins total.
  Processed 83 nets total.
DEF read: Processed 491 lines.
Output scale = microns / 100, precision 1
There are 83 nets in this design.
*** Running stage1 routing with defaults
Finished routing net _6_
Nets remaining: 82
Finished routing net _56_<0>
Nets remaining: 81
Finished routing net b4_clk
Nets remaining: 80
Finished routing net _56_<1>
Nets remaining: 79
Finished routing net _38_
Nets remaining: 78
Finished routing net _56_<2>
Nets remaining: 77
Finished routing net _8_
Nets remaining: 76
Finished routing net _23_
Nets remaining: 75
Finished routing net _15_
Nets remaining: 74
Finished routing net _56_<3>
Nets remaining: 73
Finished routing net _27_
Nets remaining: 72
Finished routing net _19_
Nets remaining: 71
Finished routing net b4_mode<0>
Nets remaining: 70
Finished routing net b4_mode<1>
Nets remaining: 69
Finished routing net _25_
Nets remaining: 68
Finished routing net _5_
Nets remaining: 67
Finished routing net _24_
Nets remaining: 66
Finished routing net _13_
Nets remaining: 65
Finished routing net _32_
Nets remaining: 64
Finished routing net _9_
Nets remaining: 63
Finished routing net _46_
Nets remaining: 62
Finished routing net _16_
Nets remaining: 61
Finished routing net _39_
Nets remaining: 60
Finished routing net _4_
Nets remaining: 59
Finished routing net b4_reset
Nets remaining: 58
Finished routing net _10_
Nets remaining: 57
Finished routing net _17_
Nets remaining: 56
Finished routing net _26_
Nets remaining: 55
Finished routing net _41_
Nets remaining: 54
Finished routing net _42_
Nets remaining: 53
Finished routing net b4_D<3>
Nets remaining: 52
Finished routing net _43_
Nets remaining: 51
Finished routing net _44_
Nets remaining: 50
Finished routing net _40_
Nets remaining: 49
Finished routing net _45_
Nets remaining: 48
Finished routing net _47_
Nets remaining: 47
Finished routing net _48_
Nets remaining: 46
Finished routing net _49_
Nets remaining: 45
Finished routing net _50_
Nets remaining: 44
Finished routing net _51_
Nets remaining: 43
Finished routing net _3_<3>
Nets remaining: 42
Finished routing net _0_<0>
Nets remaining: 41
Finished routing net _0_<1>
Nets remaining: 40
Finished routing net _0_<2>
Nets remaining: 39
Finished routing net _0_<3>
Nets remaining: 38
Finished routing net _52_
Nets remaining: 37
Finished routing net _53_
Nets remaining: 36
Finished routing net _54_
Nets remaining: 35
Finished routing net _55_
Nets remaining: 34
Finished routing net _2_
Nets remaining: 33
Finished routing net _1_
Nets remaining: 32
Finished routing net b4_Q<0>
Nets remaining: 31
Finished routing net b4_Q<1>
Nets remaining: 30
Finished routing net b4_Q<2>
Nets remaining: 29
Finished routing net b4_Q<3>
Nets remaining: 28
Finished routing net _57_
Nets remaining: 27
Finished routing net b4_load
Nets remaining: 26
Finished routing net _58_
Nets remaining: 25
Finished routing net b4_rco
Nets remaining: 24
Finished routing net _3_<0>
Nets remaining: 23
Finished routing net _3_<1>
Nets remaining: 22
Finished routing net _3_<2>
Nets remaining: 21
Finished routing net b4_enable
Nets remaining: 20
Finished routing net _7_
Nets remaining: 19
Finished routing net _11_
Nets remaining: 18
Finished routing net b4_D<0>
Nets remaining: 17
Finished routing net _12_
Nets remaining: 16
Finished routing net _14_
Nets remaining: 15
Finished routing net _18_
Nets remaining: 14
Finished routing net b4_D<1>
Nets remaining: 13
Finished routing net _20_
Nets remaining: 12
Finished routing net _21_
Nets remaining: 11
Finished routing net _22_
Nets remaining: 10
Failed to remove stacked via at grid point 64 37.
Failed to route net _28_
Finished routing net b4_D<2>
Nets remaining: 9
Finished routing net _29_
Nets remaining: 8
Finished routing net _30_
Nets remaining: 7
Finished routing net _31_
Nets remaining: 6
Finished routing net _33_
Nets remaining: 5
Finished routing net _34_
Nets remaining: 4
Finished routing net _35_
Nets remaining: 3
Finished routing net _36_
Nets remaining: 2
Finished routing net _37_
Nets remaining: 1

----------------------------------------------
Progress: Stage 1 total routes completed: 174
Failed net routes: 1
----------------------------------------------
*** Running stage2 routing with options mask 10, effort 10
Nets remaining: 1

----------------------------------------------
Progress: Stage 2 total routes completed: 175
No failed routes!
----------------------------------------------
*** Running stage3 routing with defaults, 1st round
Finished routing net _6_
Nets remaining: 82
Finished routing net _56_<0>
Nets remaining: 81
Finished routing net b4_clk
Nets remaining: 80
Finished routing net _56_<1>
Nets remaining: 79
Finished routing net _38_
Nets remaining: 78
Finished routing net _56_<2>
Nets remaining: 77
Finished routing net _8_
Nets remaining: 76
Finished routing net _23_
Nets remaining: 75
Finished routing net _15_
Nets remaining: 74
Finished routing net _56_<3>
Nets remaining: 73
Finished routing net _27_
Nets remaining: 72
Finished routing net _19_
Nets remaining: 71
Finished routing net b4_mode<0>
Nets remaining: 70
Finished routing net b4_mode<1>
Nets remaining: 69
Finished routing net _25_
Nets remaining: 68
Finished routing net _5_
Nets remaining: 67
Finished routing net _24_
Nets remaining: 66
Finished routing net _13_
Nets remaining: 65
Finished routing net _32_
Nets remaining: 64
Finished routing net _9_
Nets remaining: 63
Finished routing net _46_
Nets remaining: 62
Finished routing net _16_
Nets remaining: 61
Finished routing net _39_
Nets remaining: 60
Finished routing net _4_
Nets remaining: 59
Finished routing net b4_reset
Nets remaining: 58
Finished routing net _10_
Nets remaining: 57
Finished routing net _17_
Nets remaining: 56
Finished routing net _26_
Nets remaining: 55
Finished routing net _41_
Nets remaining: 54
Finished routing net _42_
Nets remaining: 53
Finished routing net b4_D<3>
Nets remaining: 52
Finished routing net _43_
Nets remaining: 51
Finished routing net _44_
Nets remaining: 50
Finished routing net _40_
Nets remaining: 49
Finished routing net _45_
Nets remaining: 48
Finished routing net _47_
Nets remaining: 47
Finished routing net _48_
Nets remaining: 46
Finished routing net _49_
Nets remaining: 45
Finished routing net _50_
Nets remaining: 44
Finished routing net _51_
Nets remaining: 43
Finished routing net _3_<3>
Nets remaining: 42
Finished routing net _0_<0>
Nets remaining: 41
Finished routing net _0_<1>
Nets remaining: 40
Finished routing net _0_<2>
Nets remaining: 39
Finished routing net _0_<3>
Nets remaining: 38
Finished routing net _52_
Nets remaining: 37
Finished routing net _53_
Nets remaining: 36
Finished routing net _54_
Nets remaining: 35
Finished routing net _55_
Nets remaining: 34
Finished routing net _2_
Nets remaining: 33
Finished routing net _1_
Nets remaining: 32
Finished routing net b4_Q<0>
Nets remaining: 31
Finished routing net b4_Q<1>
Nets remaining: 30
Finished routing net b4_Q<2>
Nets remaining: 29
Finished routing net b4_Q<3>
Nets remaining: 28
Finished routing net _57_
Nets remaining: 27
Finished routing net b4_load
Nets remaining: 26
Finished routing net _58_
Nets remaining: 25
Finished routing net b4_rco
Nets remaining: 24
Finished routing net _3_<0>
Nets remaining: 23
Finished routing net _3_<1>
Nets remaining: 22
Finished routing net _3_<2>
Nets remaining: 21
Finished routing net b4_enable
Nets remaining: 20
Finished routing net _7_
Nets remaining: 19
Finished routing net _11_
Nets remaining: 18
Finished routing net b4_D<0>
Nets remaining: 17
Finished routing net _12_
Nets remaining: 16
Finished routing net _14_
Nets remaining: 15
Finished routing net _18_
Nets remaining: 14
Finished routing net b4_D<1>
Nets remaining: 13
Finished routing net _20_
Nets remaining: 12
Finished routing net _21_
Nets remaining: 11
Finished routing net _22_
Nets remaining: 10
Finished routing net _28_
Nets remaining: 9
Finished routing net b4_D<2>
Nets remaining: 8
Finished routing net _29_
Nets remaining: 7
Finished routing net _30_
Nets remaining: 6
Finished routing net _31_
Nets remaining: 5
Finished routing net _33_
Nets remaining: 4
Finished routing net _34_
Nets remaining: 3
Finished routing net _35_
Nets remaining: 2
Finished routing net _36_
Nets remaining: 1
Finished routing net _37_
Nets remaining: 0

----------------------------------------------
Progress: Stage 3 total routes completed: 350
No failed routes!
----------------------------------------------
*** Running stage3 routing with defaults, 2nd round
Finished routing net _6_
Nets remaining: 82
Finished routing net _56_<0>
Nets remaining: 81
Finished routing net b4_clk
Nets remaining: 80
Finished routing net _56_<1>
Nets remaining: 79
Finished routing net _38_
Nets remaining: 78
Finished routing net _56_<2>
Nets remaining: 77
Finished routing net _8_
Nets remaining: 76
Finished routing net _23_
Nets remaining: 75
Finished routing net _15_
Nets remaining: 74
Finished routing net _56_<3>
Nets remaining: 73
Finished routing net _27_
Nets remaining: 72
Finished routing net _19_
Nets remaining: 71
Finished routing net b4_mode<0>
Nets remaining: 70
Finished routing net b4_mode<1>
Nets remaining: 69
Finished routing net _25_
Nets remaining: 68
Finished routing net _5_
Nets remaining: 67
Finished routing net _24_
Nets remaining: 66
Finished routing net _13_
Nets remaining: 65
Finished routing net _32_
Nets remaining: 64
Finished routing net _9_
Nets remaining: 63
Finished routing net _46_
Nets remaining: 62
Finished routing net _16_
Nets remaining: 61
Finished routing net _39_
Nets remaining: 60
Finished routing net _4_
Nets remaining: 59
Finished routing net b4_reset
Nets remaining: 58
Finished routing net _10_
Nets remaining: 57
Finished routing net _17_
Nets remaining: 56
Finished routing net _26_
Nets remaining: 55
Finished routing net _41_
Nets remaining: 54
Finished routing net _42_
Nets remaining: 53
Finished routing net b4_D<3>
Nets remaining: 52
Finished routing net _43_
Nets remaining: 51
Finished routing net _44_
Nets remaining: 50
Finished routing net _40_
Nets remaining: 49
Finished routing net _45_
Nets remaining: 48
Finished routing net _47_
Nets remaining: 47
Finished routing net _48_
Nets remaining: 46
Finished routing net _49_
Nets remaining: 45
Finished routing net _50_
Nets remaining: 44
Finished routing net _51_
Nets remaining: 43
Finished routing net _3_<3>
Nets remaining: 42
Finished routing net _0_<0>
Nets remaining: 41
Finished routing net _0_<1>
Nets remaining: 40
Finished routing net _0_<2>
Nets remaining: 39
Finished routing net _0_<3>
Nets remaining: 38
Finished routing net _52_
Nets remaining: 37
Finished routing net _53_
Nets remaining: 36
Finished routing net _54_
Nets remaining: 35
Finished routing net _55_
Nets remaining: 34
Finished routing net _2_
Nets remaining: 33
Finished routing net _1_
Nets remaining: 32
Finished routing net b4_Q<0>
Nets remaining: 31
Finished routing net b4_Q<1>
Nets remaining: 30
Finished routing net b4_Q<2>
Nets remaining: 29
Finished routing net b4_Q<3>
Nets remaining: 28
Finished routing net _57_
Nets remaining: 27
Finished routing net b4_load
Nets remaining: 26
Finished routing net _58_
Nets remaining: 25
Finished routing net b4_rco
Nets remaining: 24
Finished routing net _3_<0>
Nets remaining: 23
Finished routing net _3_<1>
Nets remaining: 22
Finished routing net _3_<2>
Nets remaining: 21
Finished routing net b4_enable
Nets remaining: 20
Finished routing net _7_
Nets remaining: 19
Finished routing net _11_
Nets remaining: 18
Finished routing net b4_D<0>
Nets remaining: 17
Finished routing net _12_
Nets remaining: 16
Finished routing net _14_
Nets remaining: 15
Finished routing net _18_
Nets remaining: 14
Finished routing net b4_D<1>
Nets remaining: 13
Finished routing net _20_
Nets remaining: 12
Finished routing net _21_
Nets remaining: 11
Finished routing net _22_
Nets remaining: 10
Finished routing net _28_
Nets remaining: 9
Finished routing net b4_D<2>
Nets remaining: 8
Finished routing net _29_
Nets remaining: 7
Finished routing net _30_
Nets remaining: 6
Finished routing net _31_
Nets remaining: 5
Finished routing net _33_
Nets remaining: 4
Finished routing net _34_
Nets remaining: 3
Finished routing net _35_
Nets remaining: 2
Finished routing net _36_
Nets remaining: 1
Finished routing net _37_
Nets remaining: 0

----------------------------------------------
Progress: Stage 3 total routes completed: 525
No failed routes!
----------------------------------------------
*** Writing DEF file (default)
----------------------------------------------
Final: No failed routes!
----------------------------------------------
Router script ended on Sun Dec 6 12:17:23 CST 2020
----------------------------------------------
Vesta static timing analysis tool
(c) 2013-2017 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu035_stdcells"
End of library at line 6636
Parsing module "counter_b4"
Lib Read:  Processed 6637 lines.
Verilog netlist read:  Processed 94 lines.
Number of paths analyzed:  46

Top 20 maximum delay paths:
Path DFFPOSX1_7/CLK to DFFPOSX1_9/D delay 1485.2 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_9/D delay 1485.2 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_9/D delay 1438.9 ps
Path DFFPOSX1_4/CLK to DFFPOSX1_9/D delay 1438.9 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_10/D delay 1429.41 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_10/D delay 1429.41 ps
Path DFFPOSX1_9/CLK to DFFPOSX1_9/D delay 1396.56 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_9/D delay 1396.56 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_10/D delay 1385.38 ps
Path DFFPOSX1_4/CLK to DFFPOSX1_10/D delay 1385.38 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_8/D delay 1377.9 ps
Path DFFPOSX1_4/CLK to DFFPOSX1_8/D delay 1377.9 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_8/D delay 1347.78 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_8/D delay 1347.78 ps
Path DFFPOSX1_9/CLK to DFFPOSX1_10/D delay 1345.26 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_10/D delay 1345.26 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_2/D delay 1339.25 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_2/D delay 1339.25 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_2/D delay 1327.87 ps
Path DFFPOSX1_4/CLK to DFFPOSX1_2/D delay 1327.87 ps
Computed maximum clock frequency (zero slack) = 673.31 MHz
-----------------------------------------

Number of paths analyzed:  46

Top 20 minimum delay paths:
Path DFFPOSX1_1/CLK to output pin b4_load delay 252.484 ps
Path DFFPOSX1_2/CLK to output pin b4_rco delay 252.484 ps
Path DFFPOSX1_6/CLK to output pin b4_Q[3] delay 346.563 ps
Path DFFPOSX1_10/CLK to output pin b4_Q[3] delay 346.563 ps
Path DFFPOSX1_5/CLK to output pin b4_Q[2] delay 367.3 ps
Path DFFPOSX1_9/CLK to output pin b4_Q[2] delay 367.3 ps
Path DFFPOSX1_4/CLK to output pin b4_Q[1] delay 375.257 ps
Path DFFPOSX1_8/CLK to output pin b4_Q[1] delay 375.257 ps
Path DFFPOSX1_3/CLK to output pin b4_Q[0] delay 391.679 ps
Path DFFPOSX1_7/CLK to output pin b4_Q[0] delay 391.679 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_7/D delay 549.502 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_7/D delay 549.502 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_6/D delay 557.882 ps
Path DFFPOSX1_10/CLK to DFFPOSX1_6/D delay 557.882 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_5/D delay 574.498 ps
Path DFFPOSX1_9/CLK to DFFPOSX1_5/D delay 574.498 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_10/D delay 595.658 ps
Path DFFPOSX1_10/CLK to DFFPOSX1_10/D delay 595.658 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_3/D delay 603.988 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_3/D delay 603.988 ps
Design meets minimum hold timing.
-----------------------------------------

Number of paths analyzed:  46

Top 20 maximum delay paths:
Path input pin b4_enable to DFFPOSX1_8/D delay 799.357 ps
Path input pin b4_mode[0] to DFFPOSX1_2/D delay 717.8 ps
Path input pin b4_enable to DFFPOSX1_10/D delay 713.411 ps
Path input pin b4_mode[0] to DFFPOSX1_8/D delay 700.715 ps
Path input pin b4_mode[0] to DFFPOSX1_10/D delay 700.715 ps
Path input pin b4_enable to DFFPOSX1_9/D delay 698.896 ps
Path input pin b4_mode[0] to DFFPOSX1_9/D delay 695.422 ps
Path input pin b4_enable to DFFPOSX1_7/D delay 682.494 ps
Path input pin b4_reset to DFFPOSX1_8/D delay 661.154 ps
Path input pin b4_enable to DFFPOSX1_2/D delay 657.487 ps
Path input pin b4_enable to DFFPOSX1_3/D delay 654.65 ps
Path input pin b4_enable to DFFPOSX1_4/D delay 654.65 ps
Path input pin b4_enable to DFFPOSX1_5/D delay 654.65 ps
Path input pin b4_enable to DFFPOSX1_6/D delay 654.65 ps
Path input pin b4_enable to DFFPOSX1_1/D delay 654.65 ps
Path input pin b4_mode[1] to DFFPOSX1_10/D delay 650.238 ps
Path input pin b4_mode[1] to DFFPOSX1_9/D delay 634.209 ps
Path input pin b4_mode[1] to DFFPOSX1_8/D delay 629.757 ps
Path input pin b4_mode[1] to DFFPOSX1_2/D delay 583.857 ps
Path input pin b4_mode[0] to DFFPOSX1_7/D delay 576.634 ps
-----------------------------------------

Number of paths analyzed:  46

Top 20 minimum delay paths:
Path input pin b4_clk to DFFPOSX1_10/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_9/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_8/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_7/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_6/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_5/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_4/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_3/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_2/CLK delay 0 ps
Path input pin b4_clk to DFFPOSX1_1/CLK delay 0 ps
Path input pin b4_reset to DFFPOSX1_7/D delay 158.067 ps
Path input pin b4_D[0] to DFFPOSX1_7/D delay 175.089 ps
Path input pin b4_D[1] to DFFPOSX1_8/D delay 198.87 ps
Path input pin b4_enable to DFFPOSX1_7/D delay 260.234 ps
Path input pin b4_D[3] to DFFPOSX1_10/D delay 330.454 ps
Path input pin b4_D[2] to DFFPOSX1_9/D delay 336.081 ps
Path input pin b4_mode[1] to DFFPOSX1_1/D delay 340.342 ps
Path input pin b4_mode[1] to DFFPOSX1_9/D delay 344.476 ps
Path input pin b4_mode[0] to DFFPOSX1_1/D delay 353.342 ps
Path input pin b4_mode[1] to DFFPOSX1_7/D delay 353.366 ps
-----------------------------------------

